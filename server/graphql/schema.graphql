type Query {
    getActiveLibrarys: [LibrarysList]
    getLibrarysList: [LibrarysList]
    getLibrarys(LibID: [Int]): [Librarys]
    getTreesLibrary:[treesLibrary]
    getTree(treeID: Int, lastTree: Boolean): [Librarys]
    getLibraryIdInTree(treeID: Int, lastTree: Boolean) : [Int]
    getIndicators(id: ID, boolLink: Boolean) : [Indicators]

    getData(salary: String, salaryBool: Boolean!): dataSource
}
type Mutation {
    activationLib(activeLibs: [inputActive]) : String
    activationTree(treeID: ID) : String
    activationIndicators(activeInd: [inputActive]) : String

    changeLib(library: inputLibrary) : Int
    changeIndicators(indicators: [inputDataSet]) : String
    deleteLibrarysOrDataSets(libID: Int, datasetID: [Int]) : String
    changeTree(tree: [inputTree], treeLibrary: inputTreeLibrary) : Int
    deleteTree(treeID: ID!) : String

    # changeLinkLib(library: inputLibrary) : String


#////////////////////////////////////////////////////////
    # createNewNote(data: [libraryInput]!): [Library]
    # updateNote(data: [libraryInput]!): [Library]
    # deleteNote(data: [Int]!): [Library]
    # changeTree(tree: treeInput, currentTree: libraryTreeInput): String
    # addLibraryTree(tree: libraryTreeInput): String
    # updateLibraryTree(tree: libraryTreeInput): String
    # deleteLibraryTree(trees: [libraryTreeInput]): String
#/////////////////////////////////////////////////////////
}

type LibrarysList {
    id: Int!
    name: String
    source: String
    active: Boolean
}
type Librarys {
    id: Int!
    name: String
    source: String
    active: Boolean
    inTree: Boolean
    dataSets(addData: Boolean): [DataSet]
}
type Indicators {
    id: Int!
    name: String
    source: String
    active: Boolean
    data: [Int]
    labels: [String]
    val1: Value
    val2: Value
    status: Status
}
type DataSet {
    id: ID!
    datasetID: Int
    data: [Int]
    labels: [String]
    name: String
    val1: Value
    val2: Value
    link: String
    inTree: Boolean
    children:[DataSet]
    status: Status
    indicators: [Indicators]
    # dataReport: DataParametrs
}
type Status {
    icon: String
    iconClass: String
}
type Value {
    value: Int
    label: String
}
type treesLibrary {
    id: ID!
    name: String!
    date: String
    levels: Int
    active: Boolean
}
type dataSource {
    getSalary(salary: String): [DataParametrs]
}
type DataParametrs {
    id: ID
    data: [Int]
    labels: [String]
}



input inputLibrary {
    id: ID!
    name: String
    source: String
    active: Boolean
    dataSets: [inputDataSet]
}
input inputTree {
    id: ID!
    name: String
    source: String
    active: Boolean
    inTree: Boolean
    children: [inputDataSet]
    dataSets: [inputDataSet]
}
input inputDataSet {
    id: ID!
    datasetID: ID
    data: [Int]
    labels: [String]
    name: String
    val1: inputValue
    val2: inputValue
    inTree: Boolean
    link: String
    status: inputStatus
    dataSets:[inputDataSet]
    children:[inputDataSet]
    indicators:[inputIndicators]
}
input inputIndicators {
    id: Int!
    name: String
    source: String
    active: Boolean
    data: [Int]
    labels: [String]
    val1: inputValue
    val2: inputValue
    status: inputStatus
}
input inputValue {
    value: Int
    label: String
}
input inputStatus {
    icon: String
    iconClass: String
}
input inputActive {
    id: Int
    active: Int
}
input inputTreeLibrary {
    id: ID
    name: String
    date: String
    levels: Int
}
# input inputTree {
#     children: [inputDataSet]
#     date: String
#     id: ID
#     name: String
# }


#//////////////////////////////////////////////
# rs
