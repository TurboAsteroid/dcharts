 type Query {
    getLibrary: [Library]
    getDataByParametr(parametr: String!): [DataParametrs]
}
type Mutation {
    # changeDatabase(data: String!):[Library]
    createNewNote(data: String!): [Library]
    updateNote(data: String!): [Library]
    deleteNote(data: String!): [Library]
}
type Library {
    id: ID
    data: [String]
    name: String
    val1: String
    val2: String
    link: String
    children:[Library]
}
type DataParametrs {
    id: String!
    data: [String]
    labels: [String]
} 
input libraryInput {
    id: ID!
    data: [Int!]!
    name:String!
    val1: Int!
    val2: Int!
    link: String!
}
# fragment libraryFields on Library {
#     id: ID!
#     data: [String]
#     name: String
#     val1: String
#     val2: String
#     link: String
# }