type Query {
    getActiveLibrarys: [LibrarysList]
    getLibrarysList: [LibrarysList]
    getLibrarys(LibID: [Int]): [Librarys]

#/////////////////////////////////////////////////
    getLibrary: [Library]
    getDataByParametr(linkSelected: [linkInput]!): [DataParametrs]
    getTree(treeId: Int): Library
    getData(salary: [String], salaryBool: Boolean!): dataSource
    getLibraryLink: String
    getLibraryTree: [libraryTree]
#/////////////////////////////////////////////////////////
}
type Mutation {
    activationLib(activeLibs: [inputActiveLibrary]) : String
    changeLib(library: inputLibrary) : Int
    deleteLibrarysOrDataSets(libID: Int, datasetID: [Int]) : String
    # changeLinkLib(library: inputLibrary) : String


#////////////////////////////////////////////////////////
    createNewNote(data: [libraryInput]!): [Library]
    updateNote(data: [libraryInput]!): [Library]
    deleteNote(data: [Int]!): [Library]
    changeTree(tree: treeInput, currentTree: libraryTreeInput): String
    addLibraryTree(tree: libraryTreeInput): String
    updateLibraryTree(tree: libraryTreeInput): String
    deleteLibraryTree(trees: [libraryTreeInput]): String
#/////////////////////////////////////////////////////////
}

type LibrarysList {
    id: Int!
    name: String
    source: String
    active: Boolean
}
type Librarys {
    id: Int!
    name: String
    source: String
    active: Boolean
    dataSets: [DataSet]
}
type DataSet {
    id: ID!
    datasetID: Int
    data: [Int]
    labels: [String]
    name: String
    val1: Value
    val2: Value
    link: String
    children:[DataSet]
}
type Value {
    value: Int
    label: String
}

input inputLibrary {
    id: ID!
    name: String
    source: String
    active: Boolean
    dataSets: [inputDataSet]
}
input inputDataSet {
    id: ID!
    datasetID: ID
    data: [Int]
    labels: [String]
    name: String
    val1: inputValue
    val2: inputValue
    link: String
    children:[inputDataSet]
}
input inputValue {
    value: Int
    label: String
}
input inputActiveLibrary {
    id: Int
    active: Int
}


#//////////////////////////////////////////////
type Library {
    id: ID!
    data: [Int]
    labels: [String]
    name: String
    val1: Value
    val2: Value
    link: String
    children:[Library]
}
type dataSource {
    getSalary(salary: [String]): [DataParametrs]
}

type DataParametrs {
    id: ID
    data: [Int]
    labels: [String]
} 
type libraryTree {
    id: ID!
    title: String!
    date: String
}


input libraryTreeInput {
    id: ID!
    title: String!
    date: String
}
input libraryInput {
    id: ID
    data: [Int]
    name:String
    val1: valueInput
    val2: valueInput
    labels: [String]
    children: [libraryInput]
    link: String
}
input valueInput {
    value: Int!
    label: String!
}
input linkInput {
    linkSource: String
    linkParametr: [String]
}
input treeInput {
    children: [libraryInput]
    data: [Int]
    id: ID
    name: String
}
